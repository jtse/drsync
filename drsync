#!/bin/bash
# drsync https://github.com/jtse/drsync
set -o nounset
set -o errexit
start_time="$(date +%s)"

############
# Defaults #
############
local_drupal_root=public
remote_drupal_root=web

#############
# Functions #
#############
function config() {
	input "Configure drsync for $PWD? [y/N]" RESPONSE
	if [ "$RESPONSE" != "y" ] ; then
		abort
	fi

	input "ssh host" ssh_host
	input "ssh username" ssh_user

	echo -e "# Created by drsync on $(date)\n\
# https://github.com/jtse/drsync\n\
# the ssh host, e.g., myserver.com\n\
ssh_host=$ssh_host\n\
\n\
# the ssh username\n\
ssh_user=$ssh_user\n\
\n\
# Local Drupal root relative to this file\n\
local_drupal_root=$local_drupal_root\n\
\n\
# Remote Drupal root relative to the remote working directory after logging in\n\
remote_drupal_root=$remote_drupal_root\n\
"> .drsync

	echo "Saved configuration to '.drsync'. (You may want to customize it.)"
	echo "Run 'drsync' to do a Drupal remote sync."
	exit 1
}

function input() {
	local message=$1
	local var=$2
	read -p "$message: " $var
	if [ ! ${!var} ]; then
		abort
	fi	
}

function abort() {
	echo "Aborted."
	exit 1
}

function remote() {
	local cmd=$1
	expect-password "ssh $ssh_user@$ssh_host $cmd"
}

function set-hash() {
	local var=$1
	local string=$2
	tmp=`echo $string | openssl dgst -sha1`
	eval ${var}=${tmp/(stdin)= /}
}

function set-pass-file() {
  local var=$1
	local pass_dir=$HOME/.drsync/pass
  local string
	[ -e $pass_dir ] || mkdir -p $pass_dir
	chmod 700 $HOME/.drsync
  chmod 700 $pass_dir

	set-hash filename $PWD$ssh_user@$ssh_host
	eval ${var}=$pass_dir/$filename
}

function get-password() {
	local key
	local pass_file

  set-pass-file pass_file
	set-hash key $PWD$USER

	if [ ! -f $pass_file ]; then
		local pass
		input "ssh password for '$ssh_user@$ssh_host'" pass
		echo $pass | openssl enc -aes-256-cbc -a -salt -out $pass_file -pass pass:$key
		echo "*** Saved password to $pass_file"
	fi

	chmod 600 $pass_file
	echo "*** Reading password from $pass_file"
	ssh_password=`openssl enc -aes-256-cbc -a -in $pass_file -pass pass:$key -d`
}

function expect-password() {
	local cmd=$1
	expect -c "spawn $cmd; expect password; send $ssh_password\n; interact"
}

###########
# Actions #
###########

function action_ssh() {
	local command=""
	if [ $# != 0 ]; then
		command=" ${@}"
	fi
	expect-password "ssh $ssh_user@$ssh_host$command"
}

function action_clean() {
  local pass_file
	set-pass-file pass_file
	rm -f $pass_file
	echo "Removed $pass_file."
}


########
# Main #
########
[ -f ".drsync" ] || config

source .drsync
get-password

# Check if action specified
if [ $# != 0 ]; then
	if [ "$1" != "" ]; then
		if type -t action_$1 >/dev/null; then
			if [ $# -gt 1 ]; then
				action_$1 "${@:2}"
			else
				action_$1
			fi
			exit
		else
			echo "No such action $1."
			exit 1
		fi
	fi
fi

db_dump_file=drupal-$USER-$HOSTNAME.mysql

echo "*** Creating local database dump file..."
drush sql-dump --pipe --root=$PWD/$local_drupal_root --result-file=$PWD/tmp/$db_dump_file
echo ""

echo "*** Creating remote database dump file..."
remote 'drush sql-dump --pipe --root=`printenv PWD`/'$remote_drupal_root' --result-file=`printenv PWD`/tmp/'$db_dump_file
echo ""

echo "*** Syncing remote database dump file to local..."
expect-password "rsync -z --compress-level=9 --inplace -e ssh $ssh_user@$ssh_host:tmp/$db_dump_file tmp/$db_dump_file"
echo ""

echo "*** Loading sync'd dump file into local database..."
`drush sql-connect --root=$PWD/$local_drupal_root` < tmp/$db_dump_file
drush --pipe --root=$PWD/$local_drupal_root vset preprocess_css 0
drush --pipe --root=$PWD/$local_drupal_root vset preprocess_js 0 
drush --pipe --root=$PWD/$local_drupal_root cc all
echo ""

echo "*** Syncing remote assets to local..."
expect-password "rsync -avz --compress-level=9 -e ssh $ssh_user@$ssh_host:$remote_drupal_root/sites/default/files/ $local_drupal_root/sites/default/files/"
echo ""

echo "*** Adjusting css+js permissions..."
chmod -R a+rw $local_drupal_root/sites/default/files/css
chmod -R a+rw $local_drupal_root/sites/default/files/js
echo ""

end_time="$(date +%s)"
echo "*** Done. Woohoo! Elapsed secs: $(expr $end_time - $start_time)"
